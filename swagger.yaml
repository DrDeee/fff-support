openapi: "3.0.3"
info:
  version: "1.0.0"
  title: FFF Techsupport Backend

paths:
  /groups:
    get:
      tags:
        - Gruppen
        - Frontend
      summary: "Erhalte alle Tickets, auf welche du Zugriff hast."
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Group'
  /messenger/groups:
    get:
      tags:
        - Gruppen
        - Messenger
      summary: "Erhalte alle Tickets, auf welche die der Client Zugriff hat."
      responses:
        200:
          description: ''
          content: 
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/MinimalGroup'
  /groups/{group_id}/tickets:
    get:
        tags:
          - Tickets
          - Frontend
        summary: "Erhalte alle Tickets einer Gruppe, auf die du Zugriff hast."
        parameters:
          - $ref: '#/components/parameters/group_id'
          - name: archieved
            required: false
            schema:
              type: boolean
            in: query
            description: Soll die Anfrage auch archivierte Tickets enthalten?
            
        responses:
          200:
            description: ''
            content:
              application/json:
                schema: 
                  type: array
                  items:
                    $ref: '#/components/schemas/Ticket'
    post:
      tags:
        - Tickets
        - Messenger
      summary: "Erhalte alle Tickets einer Gruppe, auf die du Zugriff hast."
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        required: true
        description: Der Inhalt des Tickets, das erstellt werden soll
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicket'
      responses:
          200:
            description: 'Das Ticket wurde erfolgreich erstellt'
            content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/Ticket'
    put:
      tags:
        - Tickets
        - Frontend
      summary: Aktualisiere ein Ticket
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        required: true
        description: Die Felder, die geupdatet werden sollen
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  $ref: '#/components/schemas/TicketState'
      responses:
        200:
          description: Das Ticket wurde geupdatet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /groups/{group_id}/tickets/claim:
    get:
      summary: Zum Claimen eines Tickets
      tags:
        - Tickets
        - Frontend
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          description: Der User hat das Ticket geclaimt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /groups/{group_id}/tickets/unclaim:
    get:
      summary: Zum Abgeben eines Tickets
      tags:
        - Tickets
        - Frontend
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          description: Der User hat das Ticket geabgegeben
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /clients:
    get:
      summary: Bekomme alle Clients
      tags:
        - Clients
        - Frontend
      responses:
        200:
          description: Abfrage erlaubt und erfolgreich
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
    post:
      summary: Erstelle einen Client
      tags:
        - Client
        - Frontend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClient'
      responses:
        200:
          description: Client erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
   
components:
  parameters:
    group_id:
      name: group_id
      required: true
      in: path
      description: Die ID der Gruppe
      schema:
        type: string
      
  schemas:
    Platform:
      type: string
      description: DIe Plattform, von der ein Objekt stammt
      enum:
        - matrix
        - whatsapp
        - email
        - telegram
    TicketState:
      description: Der Status eines Tickets
      type: string
      enum:
        - new
        - open
        - closed
        - archieved
    MinimalGroup:
      type: object
      description: Die minimalen Gruppen-Infos, die die Messenger abfragen können
      properties:
        id:
          type: string
          description: Die ID der Gruppe
        name:
          type: string
          description: Der Name der Gruppe
        description: 
          type: string
          description: Die Beschreibung der Gruppe, wird von den Messengern verwendet
    Group:
      allOf:
          - $ref: '#/components/schemas/MinimalGroup'
          - type: object
            description: Die Gruppen-Infos, die die Frontend User abfragen können
            properties:
              tickets:
                type: object
                description: Die Anzahl der Tickets pro Kategorie
                properties:
                  new:
                    type: integer
                    description: Die Anzahl der neuen Tickets
                  open:
                    type: integer
                    description: Die Anzahl der offenen/gerade bearbeiteten Tickets
                  closed:
                    type: integer
                    description: Die Anzahl der geschlossenen Tickets
              notifications:
                type: object
                description: Die Anzahl der neuen Tickets + Tickets mit neuen Nachrichten pro Kategorie
                properties:
                  new:
                    type: integer
                    description: Die Anzahl der neuen, von dem User ungesehenen Tickets
                  open:
                    type: integer
                    description: Die Anzahl der Tickets mit neuen Nachrichten
                  closed:
                    type: integer
                    description: Die Anzahl der geschlossenen Tickets mit neuen Nachrichten
    CreateTicket:
      type: object
      properties:
        title:
          type: string
          description: Der Name des Titels
        summary:
          type: string
          description: Eine kurze Zusammenfassung des Tickets
        creator:
          $ref: "#/components/schemas/MessengerUser"
    Ticket:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: ID des Tickets, entspricht der Room ID des Messengers
            platform:
              $ref: '#/components/schemas/Platform'
        - $ref: '#/components/schemas/CreateTicket'
        - type: object
          properties:
            state:
              $ref: '#/components/schemas/TicketState'
            editors:
              type: array
              description: Die User, die diese Ticket übernommen haben
              items:
                $ref: '#/components/schemas/FrontendUser'
            message_count:
              type: integer
              description: Die Anzahl der Nachrichten, die in diesem Ticket exsistieren
            new_messages:
              type: integer
              description: Die Anzahl der Nachrichten, die der User noch nicht gelesen hat
    MessengerUser:
      type: object
      description: Ein User, der mit einem Messenger-Bot interagiert
      properties:
        id:
          type: string
          description: Die ID des Users
        user_name:
          type: string
          description: Der Username des Users. Entspricht evtl. der ID
        display_name:
          type: string
          description: Der Anzeigename des Users. Entspricht evtl. dem Username
        platform:
          $ref: '#/components/schemas/Platform'
        avatar_url:
          type: string
          description: Die Avatar-URL des Users, kann null sein
    FrontendUser:
      type: object
      description: Ein User, der mit dem Frontend interagiert
      properties:
        id:
          type: string
          description: Die ID des Users, entspricht der Keycloak ID
        user_name:
          type: string
          description: Der Username des Users. Entspricht evtl. der ID
        avatar_url:
          type: string
          description: Die Avatar-URL des Users, kann null sein
    CreateClient:
      type: object
      properties:
        name:
          type: string
          description: Der Name des Clients, wird im Frontend angezeigt
        platform:
          $ref: '#/components/schemas/Platform'
        all_groups:
          type: boolean
          description: Ob der Client für alle Gruppen Events erhält und Tickets erstellen kann oder nicht
        groups:
          type: string
          description: Die ID der Gruppe, welche der Client bedienen soll
    Client:
      description: Ein Client, mit welchem man entweder EINE oder ALLE Gruppen auf EINEM Messenger vertreten kann
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Die ID des Clients, wird beim Erstellen NICHT mit angegeben
        - $ref: '#/components/schemas/CreateClient'
